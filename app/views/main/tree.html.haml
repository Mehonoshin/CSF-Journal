:erb
	<script>

	Ext.onReady(function() {
		var selectedNode;
		var Tree = Ext.tree;

	    var tree = new Tree.TreePanel({
	        useArrows: true,
	        autoScroll: true,
			width: 200,
	        animate: true,
	        enableDD: true,
	        containerScroll: true,
	        border: true,
	        dataUrl: '/gettree',

	        root: {
	            nodeType: 'async',
	            text: "<%= t('people') %>",
	            draggable: false,
	            id: '1'
	        }
	    });

		var contextMenu = new Ext.menu.Menu({
			items: [
				{ text: "<%= t('add_user') %>", iconCls: 'add-user-icon', handler: addHandler },
				{ text: "<%= t('add_group') %>", iconCls: 'add-group-icon', handler: addGroupHandler },
				{ text: "<%= t('edit') %>", iconCls: 'edit-icon', handler: editHandler },
				{ text: "<%= t('delete') %>", iconCls: 'delete-icon', handler: deleteHandler },
				{ text: "<%= t('copy') %>", iconCls: 'copy-icon', handler: copyHandler },
				{ text: "<%= t('paste') %>", iconCls: 'paste-icon', handler: pasteHandler, disabled: "true" },
				{ text: "<%= t('delete_from') %>", iconCls: 'delete-from-group-icon', handler: delfromHandler}
			]
		});

		var addWindow = new Ext.Window({ 
			layout: 'form',
			height: 250, 
			width: 300,
			resizable: false,
			closeAction: 'hide',
			items: [
				{ xtype: 'radio', fieldLabel: "<%= t('student') %>", name: 'userType', handler: userTypeChangeHandler, checked: true},
				{ xtype: 'radio', fieldLabel: "<%= t('tutor') %>", name: 'userType', handler: userTypeChangeHandler },			
				{ xtype: 'textfield', fieldLabel: "<%= t('name') %>", allowBlank: false, id: "name-field" },
				{ xtype: 'textfield', fieldLabel: "<%= t('username') %>", allowBlank: false, id: "username-field" },			
				{ xtype: 'textfield', fieldLabel: "<%= t('stud_num') %>", allowBlank: false, id: "stud-num-field" },			
				{ xtype: 'textfield', fieldLabel: "<%= t('position') %>", id: "tutor-position-field", hidden: true },
				{ xtype: 'textfield', fieldLabel: "<%= t('grade') %>", id: "tutor-grade-field", hidden: true },
			],
			buttons: [
				{
					text: "<%= t('apply') %>",
					id: 'apply-btn',
					handler: addUser
				},{
					text: "<%= t('update') %>",
					id: 'update-btn',
					handler: updateUser,
					hidden: true
				},{
					text: "<%= t('cancel') %>",
					handler: function() {
						addWindow.hide();
					}
				}
			] 
		});

		// Handlers

		function updateUser() {
			var node = tree.getSelectionModel().getSelectedNode();
			Ext.Ajax.request({
				url: '/updateuser',
				params: {
					id: node.id.slice(0, -1),
					name: addWindow.get('name-field').getValue(),
					username: addWindow.get('username-field').getValue(),															
					studNumber: addWindow.get('stud-num-field').getValue(),
					position: addWindow.get('tutor-position-field').getValue(),
					grade: addWindow.get('tutor-grade-field').getValue()				
				},
				success: function() {
					node.setText(addWindow.get('username-field').getValue());
					clearUserForm();
					addWindow.hide();
				},
				failure: function() {
					Ext.Msg.alert("<%= t('error') %>", "<%= t('unable_update_user') %>");
				}
			});
		}

		function addUser() {
			var parent = tree.getSelectionModel().getSelectedNode();
			Ext.Ajax.request({ 
				url: '/adduser',
				success: function(response) {
					newId = response.responseText;
					parent.appendChild(new Ext.tree.TreeNode({
						id: newId,
						text: addWindow.get('username-field').getValue()
					}));
					clearUserForm();
					addWindow.hide();
				},
				failure: function() {
					Ext.Msg.alert("<%= t('error') %>", "<%= t('unable_add_user') %>");
				},
				params: {
					group: parent.id,
					name: addWindow.get('name-field').getValue(),
					type: addWindow.get(0).getValue(),
					username: addWindow.get('username-field').getValue(),															
					studNumber: addWindow.get('stud-num-field').getValue(),
					position: addWindow.get('tutor-position-field').getValue(),
					grade: addWindow.get('tutor-grade-field').getValue()
				} 
			});					
		}

		function clearUserForm() {
			addWindow.get('name-field').setValue('');
			addWindow.get('username-field').setValue('');
			addWindow.get('stud-num-field').setValue('');
			addWindow.get('tutor-position-field').setValue('');
			addWindow.get('tutor-grade-field').setValue('');
		}

		function userTypeChangeHandler(a, b, c) {
			// WARNING!
			// FIX IT!!!
			if (b != null) {
				if (b) {
					addWindow.get('stud-num-field').show();
					addWindow.get('tutor-position-field').hide();
					addWindow.get('tutor-grade-field').hide();
				} else {
					addWindow.get('tutor-position-field').show();
					addWindow.get('tutor-grade-field').show();
					addWindow.get('stud-num-field').hide();
				}			
			} else {
				if (addWindow.get(0).getValue()) {
					addWindow.get('stud-num-field').show();
					addWindow.get('tutor-position-field').hide();
					addWindow.get('tutor-grade-field').hide();
				} else {
					addWindow.get('tutor-position-field').show();
					addWindow.get('tutor-grade-field').show();
					addWindow.get('stud-num-field').hide();
				}			
			}
		}

		function treeContextHandler(node) { 
			node.select(); 
			if (node.leaf == 'true') {
				contextMenu.get(0).hide();
				contextMenu.get(1).hide();
				contextMenu.get(4).show();
				contextMenu.get(5).show();
			} else {
				contextMenu.get(0).show();
				contextMenu.get(1).show();
				contextMenu.get(4).hide();
				if (selectedNode) {
					contextMenu.get(5).show();
					contextMenu.get(5).enable();
				} else {
					contextMenu.get(5).hide();
					contextMenu.get(5).disable();
				}

			}
			contextMenu.show(node.ui.getAnchor());
		}

		function delfromHandler() {
			var node = tree.getSelectionModel().getSelectedNode();
			var parentId = node.parentNode.id;
			Ext.Ajax.request({ 
				url: '/delfrom', 
				params: {
					nodeid: node.id.slice(0, -1), 
					parentid: parentId,
					leaf: node.leaf
				}
			});		
		}

		function addGroupHandler() {
			var parent = tree.getSelectionModel().getSelectedNode();
			var newId;
			var newDesc;
			Ext.Msg.prompt("<%= t('create_group_q') %>", "<%= t('type_desc') %>", function (btn, text) {
				newDesc = text;
				Ext.Ajax.request({ 
					url: '/addgroup',
					success: function (response) {
						newId = response.responseText;
					},
					params: {
						desc: text,
						parentid: parent.id
					} 
				});
				parent.appendChild(new Ext.tree.TreeNode({
					id: newId,
					text: newDesc
				}));
			});
		}

		function copyHandler() {
			selectedNode = tree.getSelectionModel().getSelectedNode();		
		}

		function pasteHandler() {
			var parent = tree.getSelectionModel().getSelectedNode();
			if ( ! parent.leaf ) {
				var currentNodeId = selectedNode.id;
				var newParent = parent.id;
				var isLeaf = selectedNode.leaf;
				parent.appendChild(new Ext.tree.TreeNode(selectedNode.attributes));			
				Ext.Ajax.request({ 
					url: '/copy', 
					params: {
						nodeid: currentNodeId, 
						newparentid: newParent,
						leaf: isLeaf,
						append: 'true'
					}
				});
				selectedNode = null;
			}
		}

		function deleteHandler() { 
			var node = tree.getSelectionModel().getSelectedNode();
			Ext.Ajax.request({ 
				url: '/delete', 
				params: {
					nodeid: node.id, 
					leaf: node.leaf
				} 
			});
			tree.getSelectionModel().getSelectedNode().remove();
		}

		function addHandler() {
			addWindow.title = "<%= t('add_user') %>";
			addWindow.get(0).show();
			addWindow.get(1).show();
			clearUserForm()
			toggleButtons('add');
			addWindow.show();
		}	

		function editHandler() {
			var node = tree.getSelectionModel().getSelectedNode();
			if (node.leaf != 'true') {
				Ext.Msg.prompt("<%= t('edit_group_q') %>", "<%= t('edit_group_desc') %>", function (btn, text) {
					if (text != '') {
						Ext.Ajax.request({ 
							url: '/updategroup', 
							params: {
								nodeid: node.id, 
								desc: text
							} 
						});
						node.setText(text);					
					}
				}, null, null, node.attributes.text);
			} else {
				addWindow.get(0).hide();
				addWindow.get(1).hide();
				toggleButtons('edit');
				addWindow.title = "<%= t('edit_user') %>";

				var node = tree.getSelectionModel().getSelectedNode();
				Ext.Ajax.request({
					url: '/getuser',
					params: {
						id: node.id
					},
					success: function(response) {
						var result = Ext.util.JSON.decode(response.responseText);
						if (result[0].user.profile_type == 'Tutor') {
							name = result[1].tutor.name;
							addWindow.get('tutor-grade-field').setValue(result[1].tutor.grade);
							addWindow.get('tutor-position-field').setValue(result[1].tutor.position);
							userTypeChangeHandler(null, false, null);
						} else {
							name = result[1].student.name;
							addWindow.get('stud-num-field').setValue(result[1].student.student_number);
							userTypeChangeHandler(null, true, null);
						}
						addWindow.get('name-field').setValue(name);
						addWindow.get('username-field').setValue(result[0].user.username);										
					}
				});
				addWindow.show();	
			}		
		}

		function copyMouseHandler(de) {
			if (de.rawEvent.ctrlKey) {
				de.dropNode = new Ext.tree.TreeNode(de.dropNode.attributes);
				var newParent = de.target.id;
				var currentNodeId = de.dropNode.id;
				var isLeaf = de.leaf;
				Ext.Ajax.request({ 
					url: '/copy', 
					params: {
						nodeid: currentNodeId, 
						newparentid: newParent,
						leaf: isLeaf,
						append: 'true'
					} 
				});						
			}
			return true;
		}

		function toggleButtons(action) {
			if (action == 'add') {
				addWindow.buttons[0].show();
				addWindow.buttons[1].hide();			
			} else {
				addWindow.buttons[1].show();
				addWindow.buttons[0].hide();
			}
		}

		function moveNode(tree, node, oldParent, newParent, index) {
			if ( !newParent.leaf ) {
				Ext.Ajax.request({ 
					url: '/move', 
					params: {
						nodeid: node.id, 
						newparentid: newParent.id, 
						oldparentid: oldParent.id, 
						dropindex: index,
						leaf: node.leaf
					} 
				});			
			} else {
				Ext.Msg.alert("<%= t('error') %>", "<%= t('cant_move_group_to_user') %>");
				return false;
			}
		}

		// Listeners

	    tree.render('tree-div');
	    tree.getRootNode().expand();

		tree.on('beforemovenode', moveNode);	
		tree.on('contextmenu', treeContextHandler);
		tree.on("beforenodedrop", copyMouseHandler);
	});
	</script>

	<div id="tree-div"></div>
	<div id="sel">-</div>